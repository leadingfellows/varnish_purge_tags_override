<?php

namespace Drupal\varnish_purge_tags_override\Form;

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\ConfigFormBase;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\varnish_purge_tags_override\VarnishPurgeTagsOverrideHelperInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Configure varnish_purge_tags_override settings for this site.
 *
 * @internal
 */
class SettingsForm extends ConfigFormBase {
    /**
     * Constructs a new SettingsForm.
     *
     * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
     *   The factory for configuration objects.
     */
    public function __construct(ConfigFactoryInterface $config_factory) {
        parent::__construct($config_factory);
    }

    /**
     * {@inheritdoc}
     */
    public static function create(ContainerInterface $container) {
        return new static(
            $container->get('config.factory')
        );
    }

    /**
     * {@inheritdoc}
     */
    public function getFormId() {
        return 'varnish_purge_tags_override_settings_form';
    }

    /**
     * {@inheritdoc}
     */
    protected function getEditableConfigNames() {
        return ['varnish_purge_tags_override.settings'];
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(array $form, FormStateInterface $form_state) {
        $config = $this->config('varnish_purge_tags_override.settings');
        $maximum_header_value_size = $config->get('maximum_header_value_size');
        if (null === $maximum_header_value_size) {
            $maximum_header_value_size = VarnishPurgeTagsOverrideHelperInterface::DEFAULT_MAXIMUM_HEADER_VALUE_SIZE;
        }
        $description = new TranslatableMarkup('Maximum size in bytes of the Cache-Tags header value<br/ >Default size is : @default_size', ['@default_size' => VarnishPurgeTagsOverrideHelperInterface::DEFAULT_MAXIMUM_HEADER_VALUE_SIZE]);
        $form['maximum_header_value_size'] = [
            '#type' => 'number',
            '#title' => $this->t('Maximum size in bytes of the Cache-Tags header value'),
            '#default_value' => $maximum_header_value_size,
            '#description' => $description,
            "#min" => 1,
        ];

        $pages =  $config->get('pages');
        if (null === $pages) {
            $pages = "";
        }
        $form['pages'] = [
            '#type' => 'textarea',
            '#title' => $this->t('Pages'),
            '#default_value' => $pages,
            '#description' => $this->t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. An example path is %user-wildcard for every user page. %front is the front page.", [
                '%user-wildcard' => '/user/*',
                '%front' => '<front>',
            ]),
        ];

        return parent::buildForm($form, $form_state);
    }

    public function validateForm(array &$form, FormStateInterface $form_state)
    {
        parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
        $paths = array_map('trim', explode("\n", $form_state->getValue('pages')));
        foreach ($paths as $path) {
            if (empty($path) || $path === '<front>' || str_starts_with($path, '/')) {
                continue;
            }
            $form_state->setErrorByName('pages', $this->t("The path %path requires a leading forward slash when used with the Pages setting.", ['%path' => $path]));
        }
    }

    /**
     * {@inheritdoc}
     */
    public function submitForm(array &$form, FormStateInterface $form_state) {
        $this->config('varnish_purge_tags_override.settings')
            ->set('maximum_header_value_size', $form_state->getValue('maximum_header_value_size'))
            ->set('pages', $form_state->getValue('pages'))
            ->save();

        parent::submitForm($form, $form_state);
    }


}
